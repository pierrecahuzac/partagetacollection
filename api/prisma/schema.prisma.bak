generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  username         String
  password         String
  role             Role             @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  collections      Collection[] // Correction ici : collections au pluriel
  // items            Item[]
  collectionsItems CollectionItem[]
  images           Image[] // Relation avec la table Image
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Collection {
  id              String           @id @default(uuid())
  title           String
  description     String?
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  endingAt        DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  startedAt       DateTime         @default(now())
  status          CollectionStatus
  collectionItems CollectionItem[]
  formatType      FormatType?      @relation(fields: [formatTypeId], references: [id])
  formatTypeId    String?
  images          Image[]          @relation("CollectionImages") // Relation avec Image
}

enum CollectionStatus {
  PRIVATE
  PUBLIC
  FRIENDS
}

model CollectionItem {
  id           String     @id @default(uuid())
  collectionId String
  itemId       String
  userId       String
  pricePaid    Float?
  quantity     Int        @default(1)
  condition    Condition?
  collection   Collection @relation(fields: [collectionId], references: [id])
  item         Item       @relation(fields: [itemId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  //@@unique([collectionId, itemId, userId])
}

enum Condition {
  NEUF
  TRES_BON_ETAT
  BON_ETAT
  MOYEN
  ABIME
  HS
}

model Item {
  id           String           @id @default(uuid())
  name         String
  description  String?
  price        Float?
  currency     String?
  //userId      String
  // user        User             @relation(fields: [userId], references: [id])
  quantity     Int?
  condition    Condition?
  barcode      String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  images       Image[]          @relation("ItemImages")
  collections  CollectionItem[]
  formatType   FormatType?      @relation(fields: [formatTypeId], references: [id])
  formatTypeId String?
}

model FormatType {
  id          String       @id @default(uuid())
  name        String       @unique
  collections Collection[]
  items       Item[]
}

model Image {
  id           String      @id @default(uuid())
  url          String // Chemin ou URL de l'image
  itemId       String? // Peut être nul si l'image est liée à une Collection
  item         Item?       @relation("ItemImages", fields: [itemId], references: [id], onDelete: Cascade)
  collectionId String? // Peut être nul si l'image est liée à un Item
  collection   Collection? @relation("CollectionImages", fields: [collectionId], references: [id], onDelete: Cascade)
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  isCover      Boolean     @default(false) // Optionnel: Indiquer si c'est l'image de couverture principale
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([itemId])
  @@index([collectionId])
}
